name: Create Release

on:
  workflow_dispatch:
    inputs:
      new_tag:
        description: 'The new tag(version) to create (e.g., v0.4.0)'
        required: true
      previous_tag:
        description: 'The previous tag for changelog generation (e.g., v0.3.58)'
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code from selected branch
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0 # Required for changelog generation from git history

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Generate changelog
        env:
          GH_TOKEN: ${{ github.token }}
          NEW_TAG: ${{ github.event.inputs.new_tag }}
          PREVIOUS_TAG: ${{ github.event.inputs.previous_tag }}
          RELEASE_BRANCH: ${{ github.ref_name }}
        run: |
          echo "## Changelog for $NEW_TAG" > changelog.md
          echo "" >> changelog.md
          echo "Update from $PREVIOUS_TAG to $NEW_TAG on branch $RELEASE_BRANCH" >> changelog.md
          echo "" >> changelog.md
          echo "Release timestamp: $(date +%Y-%m-%d)" >> changelog.md
          echo "" >> changelog.md
          gh api repos/${{ github.repository }}/compare/${PREVIOUS_TAG}...${RELEASE_BRANCH} --jq '.commits[] | "- \(.commit.message | split("\n")[0]) (by @\(.author.login // .commit.author.name) in `\(.sha | tostring | .[0:7])`) "' >> changelog.md
          mkdir -p CHANGELOGS
          mv changelog.md CHANGELOGS/${NEW_TAG}-release.md

      - name: Update version in pyproject.toml
        run: |
          # Remove 'v' prefix from tag if present (e.g., v0.4.0 -> 0.4.0)
          VERSION=${{ github.event.inputs.new_tag }}
          VERSION=${VERSION#v}

          # Update version in pyproject.toml
          sed -i "s/^version = \".*\"/version = \"$VERSION\"/" pyproject.toml

      - name: Commit version bump and changelog
        run: |
          git add pyproject.toml CHANGELOGS/${{ github.event.inputs.new_tag }}-release.md
          git commit -m "chore(release): prepare release ${{ github.event.inputs.new_tag }}"
          git push origin ${{ github.ref_name }}

      - name: Create and push tag
        run: |
          git tag ${{ github.event.inputs.new_tag }}
          git push origin ${{ github.event.inputs.new_tag }}

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ github.event.inputs.new_tag }} \
            --title "Release ${{ github.event.inputs.new_tag }}" \
            --notes-file "CHANGELOGS/${{ github.event.inputs.new_tag }}-release.md"
